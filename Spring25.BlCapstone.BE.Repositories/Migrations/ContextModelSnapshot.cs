// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spring25.BlCapstone.BE.Repositories;

#nullable disable

namespace Spring25.BlCapstone.BE.Repositories.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6949),
                            Email = "nguyenvana@gmail.com",
                            IsActive = true,
                            Name = "Eurofins Scientific",
                            Password = "123",
                            Role = "Inspector"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6952),
                            Email = "farmer@gmail.com",
                            IsActive = true,
                            Name = "Trần Thị B",
                            Password = "1@",
                            Role = "Farmer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6954),
                            Email = "lequangc@gmail.com",
                            IsActive = true,
                            Name = "Lê Quang C",
                            Password = "123",
                            Role = "Expert"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6955),
                            Email = "phaminhd@gmail.com",
                            IsActive = true,
                            Name = "Phạm Minh D",
                            Password = "123",
                            Role = "Farmer"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6957),
                            Email = "tramnbp@gmail.com",
                            IsActive = true,
                            Name = "Nguyễn Bình Phương Trâm",
                            Password = "123",
                            Role = "Farmer"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6958),
                            Email = "nguyenthienf@gmail.com",
                            IsActive = true,
                            Name = "Nguyễn Thiện F",
                            Password = "123",
                            Role = "Farmer"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6959),
                            Email = "tranbichg@gmail.com",
                            IsActive = true,
                            Name = "Trần Bích G",
                            Password = "1234",
                            Role = "Farmer"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6960),
                            Email = "inspector@gmail.com",
                            IsActive = true,
                            Name = "atvstp - TCCL VIETNAM",
                            Password = "1@",
                            Role = "Inspector"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6962),
                            Email = "phamtuani@gmail.com",
                            IsActive = true,
                            Name = "Phạm Tuan I",
                            Password = "123",
                            Role = "Expert"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(6963),
                            Email = "expert@gmail.com",
                            IsActive = true,
                            Name = "Hoàng Quỳnh J",
                            Password = "1@",
                            Role = "Expert"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(6971),
                            Email = "farmowner@gmail.com",
                            IsActive = true,
                            Name = "Trịnh Xuân Admin",
                            Password = "1@",
                            Role = "Farm Owner"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(6982),
                            Email = "retailer@gmail.com",
                            IsActive = true,
                            Name = "Trịnh Hữu Tuấn",
                            Password = "1@",
                            Role = "Retailer"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(6983),
                            Email = "khanhvhd@gmail.com",
                            IsActive = true,
                            Name = "Vũ Hoàng Duy Khánh",
                            Password = "1@",
                            Role = "Retailer"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(6984),
                            Email = "khanhlq@gmail.com",
                            IsActive = true,
                            Name = "Lê Quốc Khánh",
                            Password = "1@",
                            Role = "Retailer"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(6985),
                            Email = "binhbeopro1122@gmail.com",
                            IsActive = true,
                            Name = "Xoo Binf",
                            Password = "1@",
                            Role = "Farmer"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringFertilizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FertilizerId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringFertilizer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FertilizerId = 1,
                            Quantity = 5f,
                            TaskId = 2,
                            Unit = "Kg"
                        },
                        new
                        {
                            Id = 2,
                            FertilizerId = 2,
                            Quantity = 4f,
                            TaskId = 9,
                            Unit = "Kg"
                        },
                        new
                        {
                            Id = 3,
                            FertilizerId = 3,
                            Quantity = 6f,
                            TaskId = 14,
                            Unit = "Kg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringImage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskId = 1,
                            Url = "https://thumb.photo-ac.com/33/331a66bc564e083cb1c81babfba42d41_t.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            TaskId = 1,
                            Url = "https://www.vigecam.vn/Portals/27059/10%20quanganh/cachtrongcachuasachvasaiquaquymonongtrai%201.jpg"
                        },
                        new
                        {
                            Id = 3,
                            TaskId = 2,
                            Url = "https://danviet.ex-cdn.com/files/f1/2017/5/images/10c4864b-trang-trai-ca-chua-nhat-2.jpg"
                        },
                        new
                        {
                            Id = 4,
                            TaskId = 3,
                            Url = "https://vaas.vn/sites/default/files/inline-images/z4410949507075_34eafecfa0fd04dc99cedfea94f519bb.jpg"
                        },
                        new
                        {
                            Id = 5,
                            TaskId = 4,
                            Url = "https://danviet.ex-cdn.com/files/f1/296231569849192448/2022/5/13/edit-z3411936151630efaace430e503df8e6a548a064ff5839-1652436512592542646364-1652440184006468269746.jpeg"
                        },
                        new
                        {
                            Id = 6,
                            TaskId = 5,
                            Url = "https://i.ex-cdn.com/nongnghiep.vn/files/bao_in/2020/08/11/hb-mh-trong-bap-cai-trai-vu-1123_20200811_966-135034.jpeg"
                        },
                        new
                        {
                            Id = 7,
                            TaskId = 6,
                            Url = "https://danviet.mediacdn.vn/upload/3-2015/images/2015-07-16/1437018395-rau_muong_1211113-035347.jpg"
                        },
                        new
                        {
                            Id = 8,
                            TaskId = 7,
                            Url = "https://baothainguyen.vn/file/oldimage/baothainguyen/UserFiles/image/tru-sau.jpg"
                        },
                        new
                        {
                            Id = 9,
                            TaskId = 7,
                            Url = "https://media.quangninh.gov.vn/f5733364-2623-4af8-8267-09c9a345f144/Libraries/hinhanhbaiviet/%E1%BA%A3nh%20%C4%91%C4%83ng%20web/n%C4%83m%202021/cc%20tt-bvtv/bo%20xit/bo%20xit%20gay%20hai.jpg"
                        },
                        new
                        {
                            Id = 10,
                            TaskId = 7,
                            Url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSfgHM1ONv6CYGP2H7afMf3Y34z7W6yIY_Erw&s"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            Quantity = 2,
                            TaskId = 1,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 1,
                            Quantity = 1,
                            TaskId = 5,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 2,
                            Quantity = 1,
                            TaskId = 2,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 2,
                            Quantity = 1,
                            TaskId = 6,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 3,
                            Quantity = 10,
                            TaskId = 3,
                            Unit = "Kg"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 3,
                            Quantity = 15,
                            TaskId = 7,
                            Unit = "Kg"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 4,
                            Quantity = 1,
                            TaskId = 4,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 4,
                            Quantity = 1,
                            TaskId = 8,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 1,
                            Quantity = 1,
                            TaskId = 9,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 10,
                            ItemId = 3,
                            Quantity = 12,
                            TaskId = 10,
                            Unit = "Kg"
                        },
                        new
                        {
                            Id = 11,
                            ItemId = 2,
                            Quantity = 1,
                            TaskId = 11,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 12,
                            ItemId = 4,
                            Quantity = 1,
                            TaskId = 12,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 13,
                            ItemId = 3,
                            Quantity = 8,
                            TaskId = 13,
                            Unit = "Kg"
                        },
                        new
                        {
                            Id = 14,
                            ItemId = 2,
                            Quantity = 1,
                            TaskId = 14,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 15,
                            ItemId = 1,
                            Quantity = 2,
                            TaskId = 15,
                            Unit = "Cái"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringPesticide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PesticideId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PesticideId");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringPesticide", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PesticideId = 1,
                            Quantity = 2.5f,
                            TaskId = 6,
                            Unit = "Lít"
                        },
                        new
                        {
                            Id = 2,
                            PesticideId = 2,
                            Quantity = 3f,
                            TaskId = 15,
                            Unit = "Lít"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("ProblemId");

                    b.ToTable("CaringTask", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompleteDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7606),
                            CreatedBy = "thangbinhbeo",
                            Description = "Tưới nước đều đặn vào sáng sớm và chiều tối để giữ ẩm cho cây cà chua, tránh tưới quá nhiều gây ngập úng.",
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 1,
                            ProblemId = 1,
                            StartDate = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Tưới nước cho cà chua",
                            TaskType = "Watering"
                        },
                        new
                        {
                            Id = 2,
                            CompleteDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7610),
                            CreatedBy = "thangbinhbeo",
                            Description = "Sử dụng phân hữu cơ để cung cấp dưỡng chất cho cây cà chua, bón vào gốc cây tránh tiếp xúc trực tiếp với lá.",
                            EndDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 2,
                            ProblemId = 2,
                            StartDate = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Bón phân hữu cơ cho cà chua",
                            TaskType = "Fertilizing"
                        },
                        new
                        {
                            Id = 3,
                            CompleteDate = new DateTime(2025, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7612),
                            CreatedBy = "thangbinhbeo",
                            Description = "Quan sát lá, thân và quả dưa lưới để phát hiện dấu hiệu sâu bệnh, sử dụng biện pháp phòng trừ phù hợp.",
                            EndDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 2,
                            StartDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Kiểm tra sâu bệnh trên dưa lưới",
                            TaskType = "Inspecting"
                        },
                        new
                        {
                            Id = 4,
                            CompleteDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7614),
                            CreatedBy = "thangbinhbeo",
                            Description = "Thiết lập hệ thống tưới nhỏ giọt giúp cây nhận đủ nước mà không gây lãng phí.",
                            EndDate = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 2,
                            ProblemId = 4,
                            StartDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Ongoing",
                            TaskName = "Lắp hệ thống tưới tự động",
                            TaskType = "Setup"
                        },
                        new
                        {
                            Id = 5,
                            CompleteDate = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7617),
                            CreatedBy = "thangbinhbeo",
                            Description = "Loại bỏ cỏ dại xung quanh bắp cải để tránh cạnh tranh dinh dưỡng và ngăn ngừa sâu bệnh.",
                            EndDate = new DateTime(2024, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 3,
                            ProblemId = 5,
                            StartDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Nhổ cỏ dại quanh bắp cải",
                            TaskType = "Weeding"
                        },
                        new
                        {
                            Id = 6,
                            CompleteDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7620),
                            CreatedBy = "thangbinhbeo",
                            Description = "Sử dụng thuốc sinh học phòng trừ bệnh nấm và sâu hại trên rau muống, đảm bảo an toàn thực phẩm.",
                            EndDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 4,
                            StartDate = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Phun thuốc phòng bệnh cho rau muống",
                            TaskType = "Pesticide"
                        },
                        new
                        {
                            Id = 7,
                            CompleteDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7622),
                            CreatedBy = "thangbinhbeo",
                            Description = "Dọn sạch nilon, chai lọ, bao bì thuốc bảo vệ thực vật để giữ gìn môi trường sạch sẽ.",
                            EndDate = new DateTime(2024, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 4,
                            ProblemId = 7,
                            StartDate = new DateTime(2024, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TaskName = "Thu gom rác nông nghiệp",
                            TaskType = "Cleaning"
                        },
                        new
                        {
                            Id = 8,
                            CompleteDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7624),
                            CreatedBy = "thangbinhbeo",
                            Description = "Tưới nước vừa đủ giúp cà rốt phát triển đều, tránh tình trạng úng rễ hoặc khô hạn.",
                            EndDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 5,
                            ProblemId = 8,
                            StartDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Tưới nước cho cà rốt",
                            TaskType = "Watering"
                        },
                        new
                        {
                            Id = 9,
                            CompleteDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7627),
                            CreatedBy = "thangbinhbeo",
                            Description = "Phun phân bón lá để thúc đẩy sự phát triển của hành lá, đảm bảo đủ dưỡng chất.",
                            EndDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 6,
                            ProblemId = 9,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Ongoing",
                            TaskName = "Bón phân lá cho hành lá",
                            TaskType = "Fertilizing"
                        },
                        new
                        {
                            Id = 10,
                            CompleteDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7629),
                            CreatedBy = "thangbinhbeo",
                            Description = "Quan sát kỹ các lá non và bông mướp để phát hiện dấu hiệu sâu bệnh sớm.",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 1,
                            StartDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Kiểm tra côn trùng gây hại trên mướp hương",
                            TaskType = "Inspecting"
                        },
                        new
                        {
                            Id = 11,
                            CompleteDate = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7631),
                            CreatedBy = "thangbinhbeo",
                            Description = "Loại bỏ cành không cần thiết để tập trung dinh dưỡng cho quả ớt phát triển.",
                            EndDate = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 2,
                            ProblemId = 1,
                            StartDate = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Cắt tỉa cành ớt chuông",
                            TaskType = "Pruning"
                        },
                        new
                        {
                            Id = 12,
                            CompleteDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7633),
                            CreatedBy = "thangbinhbeo",
                            Description = "Dùng hệ thống phun sương để tưới nước cho rau xà lách, giúp lá luôn tươi tốt.",
                            EndDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 3,
                            ProblemId = 2,
                            StartDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Tưới phun sương cho rau xà lách",
                            TaskType = "Watering"
                        },
                        new
                        {
                            Id = 13,
                            CompleteDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7667),
                            CreatedBy = "thangbinhbeo",
                            Description = "Loại bỏ cỏ dại thủ công để tránh ảnh hưởng đến xà lách non.",
                            EndDate = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 4,
                            ProblemId = 3,
                            StartDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TaskName = "Nhổ cỏ dại trong vườn xà lách",
                            TaskType = "Weeding"
                        },
                        new
                        {
                            Id = 14,
                            CompleteDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7669),
                            CreatedBy = "thangbinhbeo",
                            Description = "Loại bỏ cỏ dại thủ công để tránh ảnh hưởng đến xà lách non.",
                            EndDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 5,
                            StartDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Ongoing",
                            TaskName = "Bón phân NPK cho cải ngọt",
                            TaskType = "Fertilizing"
                        },
                        new
                        {
                            Id = 15,
                            CompleteDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7671),
                            CreatedBy = "thangbinhbeo",
                            Description = "Loại bỏ cỏ dại thủ công để tránh ảnh hưởng đến xà lách non.",
                            EndDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanId = 6,
                            ProblemId = 5,
                            StartDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TaskName = "Phun thuốc sinh học phòng bệnh cho cải ngọt",
                            TaskType = "Pesticide"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.DataEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<float>("YieldHumidity")
                        .HasColumnType("real");

                    b.Property<int>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YieldId");

                    b.ToTable("DataEnvironment", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YieldId");

                    b.ToTable("Device", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8365),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "TEMP-001",
                            Name = "Cảm biến nhiệt độ",
                            Status = "Active",
                            YieldId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8368),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "MOIST-002",
                            Name = "Cảm biến độ ẩm đất",
                            Status = "Active",
                            YieldId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8369),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "LIGHT-003",
                            Name = "Cảm biến ánh sáng",
                            Status = "Active",
                            YieldId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8371),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "PH-004",
                            Name = "Cảm biến pH đất",
                            Status = "Inactive",
                            YieldId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8372),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "HUM-005",
                            Name = "Cảm biến độ ẩm không khí",
                            Status = "Active",
                            YieldId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8374),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "CO2-006",
                            Name = "Cảm biến CO2",
                            Status = "Active",
                            YieldId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8375),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "SALIN-007",
                            Name = "Cảm biến độ mặn",
                            Status = "Inactive",
                            YieldId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8376),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "WIND-008",
                            Name = "Cảm biến gió",
                            Status = "Active",
                            YieldId = 5
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8378),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "RAIN-009",
                            Name = "Cảm biến lượng mưa",
                            Status = "Active",
                            YieldId = 6
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8379),
                            CreatedBy = "Farm Owner",
                            DeviceCode = "NITRO-010",
                            Name = "Cảm biến Nitrogen",
                            Status = "Error",
                            YieldId = 7
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Expert", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 3,
                            Avatar = "https://images.unsplash.com/photo-1531384441138-2736e62e0919?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0912345678"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 9,
                            Avatar = "https://images.unsplash.com/photo-1531901599143-df5010ab9438?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 10,
                            Avatar = "https://images.unsplash.com/photo-1531123897727-8f129e1688ce?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1995, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0971122334"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Farmer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            Avatar = "https://plus.unsplash.com/premium_photo-1686269460470-a44c06f16e0a?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1980, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0901234567"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 4,
                            Avatar = "https://images.unsplash.com/photo-1589923188900-85dae523342b?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1985, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0912345678"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 5,
                            Avatar = "https://images.unsplash.com/photo-1593011951342-8426e949371f?q=80&w=1944&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1990, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0923456789"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 6,
                            Avatar = "https://images.unsplash.com/photo-1545830790-68595959c491?q=80&w=1935&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(1995, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0934567890"
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 7,
                            Avatar = "https://plus.unsplash.com/premium_photo-1661411325413-98a5ff88e8e4?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            DOB = new DateTime(2000, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0945678901"
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 15,
                            Avatar = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRGdR1EiC3BMaU8EUeRTp7Vo8oqhfLkySpTsw&s",
                            DOB = new DateTime(2003, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0838097512"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerCaringTask", b =>
                {
                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmerId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("FarmerCaringTask", (string)null);

                    b.HasData(
                        new
                        {
                            FarmerId = 1,
                            TaskId = 1,
                            Description = "Soil preparation delayed due to unexpected rain.",
                            ExpiredDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7704),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 2,
                            TaskId = 3,
                            Description = "Weeding completed successfully.",
                            ExpiredDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7706),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 3,
                            TaskId = 5,
                            Description = "Fertilizer application postponed due to supply shortage.",
                            ExpiredDate = new DateTime(2025, 3, 20, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7708),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 4,
                            TaskId = 7,
                            Description = "Irrigation system maintenance completed.",
                            ExpiredDate = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7709),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 5,
                            TaskId = 9,
                            Description = "Pest control activity in progress.",
                            ExpiredDate = new DateTime(2025, 3, 17, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7710),
                            Status = "In Progress"
                        },
                        new
                        {
                            FarmerId = 6,
                            TaskId = 11,
                            Description = "Harvest preparation started.",
                            ExpiredDate = new DateTime(2025, 3, 19, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7711),
                            Status = "In Progress"
                        },
                        new
                        {
                            FarmerId = 1,
                            TaskId = 13,
                            Description = "Crop monitoring performed with drone imaging.",
                            ExpiredDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7712),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 2,
                            TaskId = 2,
                            Description = "Seed sowing delayed due to broken equipment.",
                            ExpiredDate = new DateTime(2025, 3, 21, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7713),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 3,
                            TaskId = 4,
                            Description = "Applying compost to improve soil fertility.",
                            ExpiredDate = new DateTime(2025, 3, 12, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7715),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 4,
                            TaskId = 6,
                            Description = "Plant disease detected, applying treatment.",
                            ExpiredDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7716),
                            Status = "In Progress"
                        },
                        new
                        {
                            FarmerId = 5,
                            TaskId = 8,
                            Description = "Weed removal completed successfully.",
                            ExpiredDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7717),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 6,
                            TaskId = 10,
                            Description = "Installing new irrigation pipes.",
                            ExpiredDate = new DateTime(2025, 3, 20, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7718),
                            Status = "In Progress"
                        },
                        new
                        {
                            FarmerId = 1,
                            TaskId = 12,
                            Description = "Harvesting completed for lettuce field.",
                            ExpiredDate = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7719),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 2,
                            TaskId = 14,
                            Description = "Scheduled pest control task delayed.",
                            ExpiredDate = new DateTime(2025, 3, 19, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7721),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 3,
                            TaskId = 15,
                            Description = "Monitoring crop growth using sensors.",
                            ExpiredDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7722),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerHarvestingTask", b =>
                {
                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmerId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("FarmerHarvestingTask", (string)null);

                    b.HasData(
                        new
                        {
                            FarmerId = 1,
                            TaskId = 1,
                            Description = "Thu hoạch rau cải theo tiêu chuẩn hữu cơ, cắt sạch gốc và đóng gói.",
                            ExpiredDate = new DateTime(2025, 3, 14, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7872),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 2,
                            TaskId = 2,
                            Description = "Thu hoạch cà chua chín, phân loại quả chất lượng cao trước khi vận chuyển.",
                            ExpiredDate = new DateTime(2025, 3, 18, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7874),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 3,
                            TaskId = 3,
                            Description = "Thu hái rau muống, đảm bảo không lẫn tạp chất trong sản phẩm.",
                            ExpiredDate = new DateTime(2025, 3, 13, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7875),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 4,
                            TaskId = 4,
                            Description = "Thu hoạch dưa leo khi đạt kích thước tiêu chuẩn, kiểm tra chất lượng từng quả.",
                            ExpiredDate = new DateTime(2025, 3, 16, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7876),
                            Status = "In Progress"
                        },
                        new
                        {
                            FarmerId = 5,
                            TaskId = 5,
                            Description = "Thu hoạch bắp cải non, đảm bảo không có sâu bệnh trước khi đóng gói.",
                            ExpiredDate = new DateTime(2025, 3, 12, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7877),
                            Status = "Failed"
                        },
                        new
                        {
                            FarmerId = 6,
                            TaskId = 1,
                            Description = "Thu hái rau dền đúng thời điểm để đảm bảo độ tươi ngon.",
                            ExpiredDate = new DateTime(2025, 3, 14, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7881),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 1,
                            TaskId = 3,
                            Description = "Thu hoạch cải xanh và vận chuyển ngay sau khi thu hoạch.",
                            ExpiredDate = new DateTime(2025, 3, 17, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7882),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 2,
                            TaskId = 5,
                            Description = "Thu hoạch hành lá, buộc thành bó nhỏ trước khi phân phối.",
                            ExpiredDate = new DateTime(2025, 3, 19, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(7883),
                            Status = "In Progress"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerPackagingTask", b =>
                {
                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmerId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("FarmerPackagingTask", (string)null);

                    b.HasData(
                        new
                        {
                            FarmerId = 1,
                            TaskId = 1,
                            Description = "Đóng gói rau cải vào túi hút chân không, đảm bảo giữ độ tươi lâu.",
                            ExpiredDate = new DateTime(2025, 3, 14, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8053),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 2,
                            TaskId = 2,
                            Description = "Phân loại và đóng hộp cà chua theo kích cỡ, ghi nhãn nguồn gốc.",
                            ExpiredDate = new DateTime(2025, 3, 18, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8054),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 3,
                            TaskId = 3,
                            Description = "Đóng gói rau muống vào túi lưới, tránh đè nén gây hư hỏng.",
                            ExpiredDate = new DateTime(2025, 3, 13, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8055),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 4,
                            TaskId = 4,
                            Description = "Đặt dưa leo vào khay nhựa, bọc màng co để bảo vệ độ tươi.",
                            ExpiredDate = new DateTime(2025, 3, 16, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8057),
                            Status = "In Progress"
                        },
                        new
                        {
                            FarmerId = 5,
                            TaskId = 5,
                            Description = "Bọc bắp cải bằng giấy thực phẩm, bảo quản trong hộp carton.",
                            ExpiredDate = new DateTime(2025, 3, 12, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8058),
                            Status = "Failed"
                        },
                        new
                        {
                            FarmerId = 6,
                            TaskId = 1,
                            Description = "Đóng túi rau dền theo định lượng 500g, kiểm tra độ sạch trước khi niêm phong.",
                            ExpiredDate = new DateTime(2025, 3, 14, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8059),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 1,
                            TaskId = 3,
                            Description = "Sắp xếp rau húng quế vào hộp nhựa, đảm bảo không dập nát.",
                            ExpiredDate = new DateTime(2025, 3, 17, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8060),
                            Status = "Pending"
                        },
                        new
                        {
                            FarmerId = 3,
                            TaskId = 5,
                            Description = "Niêm phong bao bì rau mồng tơi, gắn mã QR để truy xuất nguồn gốc.",
                            ExpiredDate = new DateTime(2025, 3, 11, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8061),
                            Status = "Completed"
                        },
                        new
                        {
                            FarmerId = 5,
                            TaskId = 2,
                            Description = "Phân chia đậu bắp vào túi nhỏ 250g, đảm bảo đạt tiêu chuẩn an toàn.",
                            ExpiredDate = new DateTime(2025, 3, 16, 8, 46, 46, 805, DateTimeKind.Utc).AddTicks(8063),
                            Status = "In Progress"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerPermission", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanId", "FarmerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerPermission", (string)null);

                    b.HasData(
                        new
                        {
                            PlanId = 2,
                            FarmerId = 4,
                            CreatedAt = new DateTime(2025, 2, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7572),
                            Status = "Complete"
                        },
                        new
                        {
                            PlanId = 2,
                            FarmerId = 1,
                            CreatedAt = new DateTime(2025, 2, 11, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7574),
                            Status = "Cancel"
                        },
                        new
                        {
                            PlanId = 2,
                            FarmerId = 5,
                            CreatedAt = new DateTime(2025, 2, 12, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7575),
                            Status = "Complete"
                        },
                        new
                        {
                            PlanId = 1,
                            FarmerId = 2,
                            CreatedAt = new DateTime(2025, 3, 5, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7576),
                            Status = "Cancel"
                        },
                        new
                        {
                            PlanId = 2,
                            FarmerId = 3,
                            CreatedAt = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7577),
                            Status = "Pending"
                        },
                        new
                        {
                            PlanId = 1,
                            FarmerId = 1,
                            CreatedAt = new DateTime(2025, 1, 19, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7578),
                            Status = "Complete"
                        },
                        new
                        {
                            PlanId = 1,
                            FarmerId = 3,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7579),
                            Status = "Pending"
                        },
                        new
                        {
                            PlanId = 1,
                            FarmerId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7580),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fertilizer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Apply 100g per square meter every 2 weeks. Suitable for vegetables.",
                            Image = "https://happyagri.com.vn/storage/jf/u8/jfu8y6304pvhe0zuxf3o3dwegwna_phan-bon-la-abaxton-hieu-ocenum-organic-plus.webp",
                            Name = "Organic Plus",
                            Quantity = 50f,
                            Status = "Available",
                            Type = "Organic",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Use 50g per plant every month. Mix with water before applying.",
                            Image = "https://jvf.com.vn/vnt_upload/product/05_2019/Hinhbaobi/g1a_mat_truoc.jpg",
                            Name = "NPK 16-16-8",
                            Quantity = 100f,
                            Status = "Available",
                            Type = "Chemical",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dissolve 5ml in 1 liter of water. Spray on leaves weekly.",
                            Image = "https://nongnghiephoangphuc.com/thumbs/1600x1600x2/upload/product/hm-99-moi-2058.png",
                            Name = "Humic Acid",
                            Quantity = 30f,
                            Status = "Out of Stock",
                            Type = "Organic",
                            Unit = "liters"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Apply 20g per square meter before planting. Improves root growth.",
                            Image = "https://cdn.mos.cms.futurecdn.net/rRaQV8Td8U78mUXoeaA2j7.jpg",
                            Name = "Super Phosphate",
                            Quantity = 80f,
                            Status = "Available",
                            Type = "Mineral",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Use 30g per tree during flowering season. Helps in fruit development.",
                            Image = "https://hoachatthinghiem.org/wp-content/uploads/2022/10/Potassium-Sulphate-DUKSAN.jpg",
                            Name = "Potassium Sulfate",
                            Quantity = 60f,
                            Status = "Limited Stock",
                            Type = "Chemical",
                            Unit = "kg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("HarvestingImage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskId = 1,
                            Url = "https://media-cdn-v2.laodong.vn/Storage/NewsPortal/2022/1/4/991490/Thu-Hoach-Rau-Cai-Th.jpg"
                        },
                        new
                        {
                            Id = 2,
                            TaskId = 2,
                            Url = "https://kholanhbachkhoa.net/wp-content/uploads/2024/05/vuon-ca-chua-da-lat-3.jpg"
                        },
                        new
                        {
                            Id = 3,
                            TaskId = 3,
                            Url = "https://fatechme.com/uploads/bapcai12.jpg"
                        },
                        new
                        {
                            Id = 4,
                            TaskId = 4,
                            Url = "https://danviet.mediacdn.vn/upload/3-2018/images/2018-07-02/Bi-quyet-trong-dua-leo-moi-vu-moi-trung-cua-nguoi-phu-nu-miet-vuon-anh-trong-2-1530512281-width680height490.jpg"
                        },
                        new
                        {
                            Id = 5,
                            TaskId = 5,
                            Url = "https://tttt.ninhbinh.gov.vn/uploads/images/DAN%20TOC%20MN%202022/DTMN%202024/QUA%20BI%20DO.jpg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaskId");

                    b.ToTable("HarvestingItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 5,
                            Quantity = 2,
                            TaskId = 1,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 6,
                            Quantity = 1,
                            TaskId = 1,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 7,
                            Quantity = 1,
                            TaskId = 2,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 5,
                            Quantity = 1,
                            TaskId = 2,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            Quantity = 1,
                            TaskId = 3,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            Quantity = 2,
                            TaskId = 3,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            Quantity = 1,
                            TaskId = 4,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 6,
                            Quantity = 1,
                            TaskId = 4,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 6,
                            Quantity = 1,
                            TaskId = 5,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 10,
                            ItemId = 5,
                            Quantity = 2,
                            TaskId = 5,
                            Unit = "Cái"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("FailQuantity")
                        .HasColumnType("real");

                    b.Property<float?>("HarvestedQuantity")
                        .HasColumnType("real");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("HarvestingTask", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompleteDate = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7834),
                            CreatedAt = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7835),
                            CreatedBy = "thangbinhbeo",
                            Description = "Thu hoạch rau cải trước khi trời quá nắng",
                            EndDate = new DateTime(2025, 3, 12, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7833),
                            HarvestedQuantity = 50f,
                            PlanId = 2,
                            ResultContent = "Đã hủy vì cây không đạt chất lượng kiểm định",
                            StartDate = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7831),
                            Status = "Cancel",
                            TaskName = "Thu hoạch rau cải"
                        },
                        new
                        {
                            Id = 2,
                            CompleteDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7838),
                            CreatedAt = new DateTime(2025, 3, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7839),
                            CreatedBy = "thangbinhbeo",
                            Description = "Thu hoạch cà chua chín đỏ",
                            EndDate = new DateTime(2025, 3, 11, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7838),
                            HarvestedQuantity = 30f,
                            PlanId = 1,
                            StartDate = new DateTime(2025, 3, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7837),
                            Status = "Pending",
                            TaskName = "Thu hoạch cà chua"
                        },
                        new
                        {
                            Id = 3,
                            CompleteDate = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7842),
                            CreatedAt = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7843),
                            CreatedBy = "thangbinhbeo",
                            Description = "Thu hoạch bắp cải vào sáng sớm để giữ độ tươi",
                            EndDate = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7842),
                            HarvestedQuantity = 40f,
                            PlanId = 3,
                            ResultContent = "Đã hủy vì cây chết hết rồi",
                            StartDate = new DateTime(2025, 3, 2, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7841),
                            Status = "Cancel",
                            TaskName = "Thu hoạch bắp cải"
                        },
                        new
                        {
                            Id = 4,
                            CompleteDate = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7846),
                            CreatedAt = new DateTime(2025, 3, 11, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7846),
                            CreatedBy = "thangbinhbeo",
                            Description = "Thu hoạch dưa leo vào đúng thời điểm chín",
                            EndDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7845),
                            HarvestedQuantity = 20f,
                            PlanId = 4,
                            StartDate = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7845),
                            Status = "Pending",
                            TaskName = "Thu hoạch dưa leo"
                        },
                        new
                        {
                            Id = 5,
                            CompleteDate = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7849),
                            CreatedAt = new DateTime(2025, 3, 7, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7850),
                            CreatedBy = "thangbinhbeo",
                            Description = "Thu hoạch bí đỏ khi vỏ cứng lại",
                            EndDate = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7848),
                            HarvestedQuantity = 15f,
                            PlanId = 5,
                            StartDate = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7848),
                            Status = "Pending",
                            TaskName = "Thu hoạch bí đỏ"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanHarvest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InspectorId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfSample")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("SampleWeight")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PlanId");

                    b.ToTable("InspectingForm", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanHarvest = true,
                            CompleteDate = new DateTime(2025, 3, 11, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7935),
                            CreatedAt = new DateTime(2025, 3, 9, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7936),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đánh giá chất lượng rau cải trước khi thu hoạch",
                            EndDate = new DateTime(2025, 3, 11, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7933),
                            FormName = "Kiểm tra rau cải",
                            InspectorId = 2,
                            PlanId = 1,
                            ResultContent = "Rau cải đạt chuẩn",
                            StartDate = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7933),
                            Status = "Completed",
                            Type = "Kiểm tra chất lượng"
                        },
                        new
                        {
                            Id = 2,
                            CanHarvest = true,
                            CompleteDate = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7940),
                            CreatedAt = new DateTime(2025, 3, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7941),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đánh giá màu sắc và chất lượng cà chua",
                            EndDate = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7939),
                            FormName = "Kiểm tra cà chua",
                            InspectorId = 1,
                            PlanId = 2,
                            ResultContent = "Cà chua đạt độ chín",
                            StartDate = new DateTime(2025, 3, 9, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7939),
                            Status = "Completed",
                            Type = "Kiểm tra độ chín"
                        },
                        new
                        {
                            Id = 3,
                            CanHarvest = false,
                            CompleteDate = new DateTime(2025, 3, 9, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7975),
                            CreatedAt = new DateTime(2025, 3, 7, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7976),
                            CreatedBy = "thangbinhbeo",
                            Description = "Kiểm tra độ ẩm và màu sắc bắp cải",
                            EndDate = new DateTime(2025, 3, 9, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7974),
                            FormName = "Kiểm tra bắp cải",
                            InspectorId = 2,
                            PlanId = 3,
                            ResultContent = "Bắp cải hơi thiếu nước",
                            StartDate = new DateTime(2025, 3, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7974),
                            Status = "Pending",
                            Type = "Kiểm tra độ ẩm"
                        },
                        new
                        {
                            Id = 4,
                            CanHarvest = true,
                            CompleteDate = new DateTime(2025, 3, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7979),
                            CreatedAt = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7980),
                            CreatedBy = "thangbinhbeo",
                            Description = "Xác định độ chín và độ giòn của dưa leo",
                            EndDate = new DateTime(2025, 3, 8, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7978),
                            FormName = "Kiểm tra dưa leo",
                            InspectorId = 1,
                            PlanId = 4,
                            ResultContent = "Dưa leo đạt chuẩn",
                            StartDate = new DateTime(2025, 3, 7, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7978),
                            Status = "Completed",
                            Type = "Kiểm tra độ chín"
                        },
                        new
                        {
                            Id = 5,
                            CanHarvest = false,
                            CompleteDate = new DateTime(2025, 3, 7, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7983),
                            CreatedAt = new DateTime(2025, 3, 5, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7983),
                            CreatedBy = "thangbinhbeo",
                            Description = "Kiểm tra vỏ bí đỏ để xác định độ cứng",
                            EndDate = new DateTime(2025, 3, 7, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7982),
                            FormName = "Kiểm tra bí đỏ",
                            InspectorId = 2,
                            PlanId = 5,
                            ResultContent = "Vỏ bí đỏ chưa đủ cứng",
                            StartDate = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7981),
                            Status = "Completed",
                            Type = "Kiểm tra độ cứng"
                        },
                        new
                        {
                            Id = 6,
                            CanHarvest = true,
                            CompleteDate = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7986),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7987),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đánh giá độ ngọt và màu sắc của ớt chuông",
                            EndDate = new DateTime(2025, 3, 6, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7985),
                            FormName = "Kiểm tra ớt chuông",
                            InspectorId = 1,
                            PlanId = 6,
                            ResultContent = "Ớt chuông có độ ngọt tốt",
                            StartDate = new DateTime(2025, 3, 5, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7985),
                            Status = "Completed",
                            Type = "Kiểm tra độ ngọt"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ResultId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("InspectingImage", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Arsen")
                        .HasColumnType("real");

                    b.Property<float>("Cadmi")
                        .HasColumnType("real");

                    b.Property<float>("Chlorate")
                        .HasColumnType("real");

                    b.Property<float>("Coliforms")
                        .HasColumnType("real");

                    b.Property<float>("Dithiocarbamate")
                        .HasColumnType("real");

                    b.Property<float>("Ecoli")
                        .HasColumnType("real");

                    b.Property<string>("EvaluatedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<float>("Glyphosate_Glufosinate")
                        .HasColumnType("real");

                    b.Property<float>("Hydrargyrum")
                        .HasColumnType("real");

                    b.Property<float>("HydrogenPhosphide")
                        .HasColumnType("real");

                    b.Property<float>("MethylBromide")
                        .HasColumnType("real");

                    b.Property<float>("NaNO3_KNO3")
                        .HasColumnType("real");

                    b.Property<float>("Nitrat")
                        .HasColumnType("real");

                    b.Property<float>("Perchlorate")
                        .HasColumnType("real");

                    b.Property<float>("Plumbum")
                        .HasColumnType("real");

                    b.Property<float>("Salmonella")
                        .HasColumnType("real");

                    b.Property<float>("SulfurDioxide")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("InspectingResult", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Arsen = 0.01f,
                            Cadmi = 0.005f,
                            Chlorate = 0.1f,
                            Coliforms = 10f,
                            Dithiocarbamate = 0.02f,
                            Ecoli = 1f,
                            EvaluatedResult = "Pass",
                            FormId = 1,
                            Glyphosate_Glufosinate = 0.02f,
                            Hydrargyrum = 0.001f,
                            HydrogenPhosphide = 0.05f,
                            MethylBromide = 0.1f,
                            NaNO3_KNO3 = 10f,
                            Nitrat = 50f,
                            Perchlorate = 0.02f,
                            Plumbum = 0.02f,
                            Salmonella = 0f,
                            SulfurDioxide = 5f
                        },
                        new
                        {
                            Id = 2,
                            Arsen = 0.02f,
                            Cadmi = 0.007f,
                            Chlorate = 0.2f,
                            Coliforms = 20f,
                            Dithiocarbamate = 0.03f,
                            Ecoli = 3f,
                            EvaluatedResult = "Fail",
                            FormId = 2,
                            Glyphosate_Glufosinate = 0.03f,
                            Hydrargyrum = 0.002f,
                            HydrogenPhosphide = 0.06f,
                            MethylBromide = 0.2f,
                            NaNO3_KNO3 = 15f,
                            Nitrat = 60f,
                            Perchlorate = 0.03f,
                            Plumbum = 0.03f,
                            Salmonella = 1f,
                            SulfurDioxide = 10f
                        },
                        new
                        {
                            Id = 3,
                            Arsen = 0.005f,
                            Cadmi = 0.004f,
                            Chlorate = 0.08f,
                            Coliforms = 5f,
                            Dithiocarbamate = 0.015f,
                            Ecoli = 0f,
                            EvaluatedResult = "Pass",
                            FormId = 3,
                            Glyphosate_Glufosinate = 0.015f,
                            Hydrargyrum = 0.0005f,
                            HydrogenPhosphide = 0.03f,
                            MethylBromide = 0.05f,
                            NaNO3_KNO3 = 8f,
                            Nitrat = 40f,
                            Perchlorate = 0.015f,
                            Plumbum = 0.015f,
                            Salmonella = 0f,
                            SulfurDioxide = 3f
                        },
                        new
                        {
                            Id = 4,
                            Arsen = 0.03f,
                            Cadmi = 0.01f,
                            Chlorate = 0.3f,
                            Coliforms = 25f,
                            Dithiocarbamate = 0.04f,
                            Ecoli = 5f,
                            EvaluatedResult = "Fail",
                            FormId = 4,
                            Glyphosate_Glufosinate = 0.04f,
                            Hydrargyrum = 0.003f,
                            HydrogenPhosphide = 0.08f,
                            MethylBromide = 0.3f,
                            NaNO3_KNO3 = 20f,
                            Nitrat = 70f,
                            Perchlorate = 0.04f,
                            Plumbum = 0.04f,
                            Salmonella = 2f,
                            SulfurDioxide = 15f
                        },
                        new
                        {
                            Id = 5,
                            Arsen = 0.007f,
                            Cadmi = 0.006f,
                            Chlorate = 0.09f,
                            Coliforms = 8f,
                            Dithiocarbamate = 0.018f,
                            Ecoli = 1f,
                            EvaluatedResult = "Pass",
                            FormId = 5,
                            Glyphosate_Glufosinate = 0.018f,
                            Hydrargyrum = 0.0012f,
                            HydrogenPhosphide = 0.04f,
                            MethylBromide = 0.07f,
                            NaNO3_KNO3 = 9f,
                            Nitrat = 45f,
                            Perchlorate = 0.018f,
                            Plumbum = 0.017f,
                            Salmonella = 0f,
                            SulfurDioxide = 4f
                        },
                        new
                        {
                            Id = 6,
                            Arsen = 0.011f,
                            Cadmi = 0.006f,
                            Chlorate = 0.11f,
                            Coliforms = 9f,
                            Dithiocarbamate = 0.025f,
                            Ecoli = 1f,
                            EvaluatedResult = "Pass",
                            FormId = 6,
                            Glyphosate_Glufosinate = 0.022f,
                            Hydrargyrum = 0.0011f,
                            HydrogenPhosphide = 0.055f,
                            MethylBromide = 0.12f,
                            NaNO3_KNO3 = 12f,
                            Nitrat = 55f,
                            Perchlorate = 0.022f,
                            Plumbum = 0.021f,
                            Salmonella = 0f,
                            SulfurDioxide = 6f
                        },
                        new
                        {
                            Id = 7,
                            Arsen = 0.025f,
                            Cadmi = 0.009f,
                            Chlorate = 0.22f,
                            Coliforms = 18f,
                            Dithiocarbamate = 0.035f,
                            Ecoli = 4f,
                            EvaluatedResult = "Fail",
                            FormId = 1,
                            Glyphosate_Glufosinate = 0.035f,
                            Hydrargyrum = 0.0022f,
                            HydrogenPhosphide = 0.07f,
                            MethylBromide = 0.25f,
                            NaNO3_KNO3 = 18f,
                            Nitrat = 65f,
                            Perchlorate = 0.035f,
                            Plumbum = 0.035f,
                            Salmonella = 1f,
                            SulfurDioxide = 12f
                        },
                        new
                        {
                            Id = 8,
                            Arsen = 0.008f,
                            Cadmi = 0.005f,
                            Chlorate = 0.085f,
                            Coliforms = 7f,
                            Dithiocarbamate = 0.017f,
                            Ecoli = 1f,
                            EvaluatedResult = "Pass",
                            FormId = 2,
                            Glyphosate_Glufosinate = 0.017f,
                            Hydrargyrum = 0.0009f,
                            HydrogenPhosphide = 0.035f,
                            MethylBromide = 0.06f,
                            NaNO3_KNO3 = 10f,
                            Nitrat = 42f,
                            Perchlorate = 0.017f,
                            Plumbum = 0.018f,
                            Salmonella = 0f,
                            SulfurDioxide = 4f
                        },
                        new
                        {
                            Id = 9,
                            Arsen = 0.028f,
                            Cadmi = 0.012f,
                            Chlorate = 0.35f,
                            Coliforms = 30f,
                            Dithiocarbamate = 0.045f,
                            Ecoli = 6f,
                            EvaluatedResult = "Fail",
                            FormId = 3,
                            Glyphosate_Glufosinate = 0.045f,
                            Hydrargyrum = 0.0028f,
                            HydrogenPhosphide = 0.09f,
                            MethylBromide = 0.35f,
                            NaNO3_KNO3 = 25f,
                            Nitrat = 75f,
                            Perchlorate = 0.045f,
                            Plumbum = 0.038f,
                            Salmonella = 2f,
                            SulfurDioxide = 18f
                        },
                        new
                        {
                            Id = 10,
                            Arsen = 0.006f,
                            Cadmi = 0.003f,
                            Chlorate = 0.07f,
                            Coliforms = 4f,
                            Dithiocarbamate = 0.013f,
                            Ecoli = 0f,
                            EvaluatedResult = "Pass",
                            FormId = 4,
                            Glyphosate_Glufosinate = 0.013f,
                            Hydrargyrum = 0.0004f,
                            HydrogenPhosphide = 0.025f,
                            MethylBromide = 0.04f,
                            NaNO3_KNO3 = 7f,
                            Nitrat = 35f,
                            Perchlorate = 0.013f,
                            Plumbum = 0.014f,
                            Salmonella = 0f,
                            SulfurDioxide = 2f
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hotline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Inspector", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Address = "123 Green Farm Road, Hanoi",
                            Description = "Experienced agricultural inspector with 10 years in the field.",
                            Hotline = "0123456789",
                            ImageUrl = "https://static.ybox.vn/2024/6/0/1719750238636-eurofins_1200x628.jpg"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 8,
                            Address = "456 Eco Farm Lane, Ho Chi Minh City",
                            Description = "Expert in organic certification and food safety.",
                            Hotline = "0987654321",
                            ImageUrl = "https://baodongnai.com.vn/file/e7837c02876411cd0187645a2551379f/dataimages/202304/original/images2525186_35b.jpg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Item", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bình tưới nước dung tích 5L",
                            Image = "https://product.hstatic.net/200000199113/product/7220965_7709e84c2e3f40cf8111c44225c96646_large.jpg",
                            Name = "Bình tưới cây",
                            Quantity = 100,
                            Status = "Active",
                            Type = "Caring",
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kéo chuyên dụng để cắt tỉa cành",
                            Image = "https://fact-depot.com/tmp/cache/images/_thumbs/720x720/media/product/30542/Keo-cat-tia-cong-vien-cay-xanh-HM044-cat-tia-co-la.png",
                            Name = "Kéo cắt tỉa",
                            Quantity = 100,
                            Status = "Active",
                            Type = "Caring",
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dụng cụ bón phân dạng viên",
                            Image = "https://vn-live-01.slatic.net/p/eab87be47ffa092ca1becbc00ff06ed2.jpg",
                            Name = "Bón phân hữu cơ",
                            Quantity = 100,
                            Status = "In-stock",
                            Type = "Caring",
                            Unit = "Hộp"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dụng cụ đo độ ẩm của đất",
                            Image = "https://thbvn.com/cdn/images/may-do-do-am/dung-cu-do-do-am-dat-tot-1.jpg",
                            Name = "Máy đo độ ẩm đất",
                            Quantity = 100,
                            Status = "Active",
                            Type = "Caring",
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dao chuyên dụng để cắt trái cây",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMlW2sl4uFDnr7wiHZo420jhTUDtPZmPQkqw&s",
                            Name = "Dao thu hoạch",
                            Quantity = 100,
                            Status = "In-stock",
                            Type = "Harvesting",
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Giỏ chứa nông sản sau thu hoạch",
                            Image = "https://ecohub.vn/wp-content/uploads/2021/08/thung-go-luu-tru-nong-san-do-dung-1.jpg",
                            Name = "Giỏ đựng nông sản",
                            Quantity = 100,
                            Status = "In-stock",
                            Type = "Harvesting",
                            Unit = "Giỏ"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Máy gặt đập liên hợp mini",
                            Image = "https://mayxaydungmlk.vn/wp-content/uploads/2022/07/may-gat-DC60.jpg",
                            Name = "Máy cắt lúa",
                            Quantity = 100,
                            Status = "In-stock",
                            Type = "Harvesting",
                            Unit = "Máy"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Máy đóng gói tốc độ cao cho nông sản.",
                            Image = "https://dienmayviteko.com/pic/Product/VPM-BZJ600-4_1029_HasThumb.webp",
                            Name = "Máy đóng gói tự động",
                            Quantity = 5,
                            Status = "Active",
                            Type = "Packaging",
                            Unit = "Máy"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Thiết bị bảo quản sản phẩm bằng cách hút chân không.",
                            Image = "https://dbk.vn/uploads/ckfinder/images/may-hut-chan-khong/may-hut-chan-khong-cong-nghiep-Magic-Air-MZ600.jpg",
                            Name = "Máy hút chân không",
                            Quantity = 8,
                            Status = "Active",
                            Type = "Packaging",
                            Unit = "Máy"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Cân chính xác dùng trong quy trình đóng gói.",
                            Image = "https://cokhitanminh.com/may-dong-goi/wp-content/uploads/2021/11/may-dong-goi-can-dien-tu-3-bien-tmdg-2f14-ckmdg-1.jpg",
                            Name = "Cân điện tử đóng gói",
                            Quantity = 10,
                            Status = "Active",
                            Type = "Packaging",
                            Unit = "Máy"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Máy đóng gói túi ni lông hoặc túi giấy cho sản phẩm nông nghiệp.",
                            Image = "https://cnva.vn/wp-content/uploads/2024/02/may-dong-goi-tui-roi-tui-zip.jpg",
                            Name = "Máy đóng gói túi",
                            Quantity = 7,
                            Status = "In-stock",
                            Type = "Packaging",
                            Unit = "Máy"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Dây chuyền đóng gói tự động hỗ trợ quy trình sản xuất.",
                            Image = "https://mayduoctiendat.com/upload/filemanager/files/day-chuyen-dong-goi-bot-hop-thiec-tu-dong.jpg",
                            Name = "Dây chuyền đóng gói",
                            Quantity = 2,
                            Status = "Out-stock",
                            Type = "Packaging",
                            Unit = "Dây"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationExpert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.ToTable("NotificationExpert", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationFarmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.ToTable("NotificationFarmer", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationOwner", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationRetailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetailerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RetailerId");

                    b.ToTable("NotificationRetailer", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("DepositPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("EstimatedPickupDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackagingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("RetailerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PackagingTypeId");

                    b.HasIndex("PlanId");

                    b.HasIndex("RetailerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("PackagingImage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskId = 1,
                            Url = "https://maydonggoi.com.vn/wp-content/uploads/2021/12/quy-trinh-dong-goi-gao-6.jpg"
                        },
                        new
                        {
                            Id = 2,
                            TaskId = 2,
                            Url = "https://maygoi.vn/wp-content/uploads/2019/03/maxresdefault-1.jpg"
                        },
                        new
                        {
                            Id = 3,
                            TaskId = 3,
                            Url = "https://thainguyencity.gov.vn/upload/news/2013/11/532/image/img5751.jpg"
                        },
                        new
                        {
                            Id = 4,
                            TaskId = 4,
                            Url = "https://jraifarm.com/files/upload/files/h%E1%BA%A1t%20%C4%91i%E1%BB%81u/Quy%20c%C3%A1ch%20%C4%91%C3%B3ng%20g%C3%B3i%20h%E1%BA%A1t%20%C4%91i%E1%BB%81u%20xu%E1%BA%A5t%20kh%E1%BA%A9u%204.png"
                        },
                        new
                        {
                            Id = 5,
                            TaskId = 5,
                            Url = "https://nanufoods.vn/wp-content/uploads/2020/05/Soft-dried-mango-in-carton-579x400.jpg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaskId");

                    b.ToTable("PackagingItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 8,
                            Quantity = 2,
                            TaskId = 1,
                            Unit = "machine"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 9,
                            Quantity = 4,
                            TaskId = 2,
                            Unit = "unit"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 10,
                            Quantity = 6,
                            TaskId = 1,
                            Unit = "unit"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 11,
                            Quantity = 3,
                            TaskId = 4,
                            Unit = "machine"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 12,
                            Quantity = 1,
                            TaskId = 5,
                            Unit = "line"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HarvestingTaskId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PackagingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PackagingTaskId")
                        .HasColumnType("int");

                    b.Property<int>("PackagingUnit")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HarvestingTaskId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PackagingTaskId");

                    b.ToTable("PackagingProduct", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PackagingTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PackedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PackagingTypeId");

                    b.HasIndex("PlanId");

                    b.ToTable("PackagingTask", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompleteDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8011),
                            CreatedAt = new DateTime(2025, 3, 9, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8012),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đóng gói gạo vào túi 5kg",
                            EndDate = new DateTime(2025, 3, 17, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8011),
                            PackedQuantity = 1000,
                            PlanId = 1,
                            ResultContent = "Đã đóng gói theo túi 5kg, thu được 1000 túi",
                            StartDate = new DateTime(2025, 3, 10, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8010),
                            Status = "Complete",
                            TaskName = "Đóng gói gạo",
                            UpdatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8013)
                        },
                        new
                        {
                            Id = 2,
                            CompleteDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8016),
                            CreatedAt = new DateTime(2025, 3, 11, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8017),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đóng gói cà phê bột vào túi 1kg",
                            EndDate = new DateTime(2025, 3, 16, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8016),
                            PackedQuantity = 500,
                            PlanId = 2,
                            ResultContent = "Đã đóng gói được 500 túi",
                            StartDate = new DateTime(2025, 3, 12, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8015),
                            Status = "Complete",
                            TaskName = "Đóng gói cà phê",
                            UpdatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8018)
                        },
                        new
                        {
                            Id = 3,
                            CompleteDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8021),
                            CreatedAt = new DateTime(2025, 3, 12, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8021),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đóng gói trà xanh vào hộp 100g",
                            EndDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8020),
                            PackedQuantity = 20000,
                            PlanId = 3,
                            ResultContent = "Đã đóng gói thành công 20000 gói",
                            StartDate = new DateTime(2025, 3, 13, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8020),
                            Status = "Complete",
                            TaskName = "Đóng gói trà xanh",
                            UpdatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8022)
                        },
                        new
                        {
                            Id = 4,
                            CompleteDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8025),
                            CreatedAt = new DateTime(2025, 3, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8026),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đóng gói hạt điều vào túi 500g",
                            EndDate = new DateTime(2025, 3, 19, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8025),
                            PackedQuantity = 300,
                            PlanId = 4,
                            ResultContent = "Đã đóng gói thành công",
                            StartDate = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8024),
                            Status = "Complete",
                            TaskName = "Đóng gói hạt điều",
                            UpdatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8027)
                        },
                        new
                        {
                            Id = 5,
                            CompleteDate = new DateTime(2025, 3, 18, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8029),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8030),
                            CreatedBy = "thangbinhbeo",
                            Description = "Đóng gói xoài sấy vào túi 250g",
                            EndDate = new DateTime(2025, 3, 20, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8029),
                            PackedQuantity = 10000,
                            PlanId = 5,
                            ResultContent = "Đã đóng gói 10000 gói",
                            StartDate = new DateTime(2025, 3, 16, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8028),
                            Status = "Complete",
                            TaskName = "Đóng gói xoài sấy",
                            UpdatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(8030)
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackagingType", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pesticide", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Mix 5ml with 1 liter of water. Spray on plants every 7 days.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQCFbvgQnnXLUDetHBrkklU5PV1fsamB8Yt2Q&s",
                            Name = "Neem Oil",
                            Quantity = 20f,
                            Status = "Available",
                            Type = "Organic",
                            Unit = "liters"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dilute 10ml in 1 liter of water. Use in the evening for best results.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQyaA3fAHWe-2ncRTLEDdF5yQMCeXNlLWGW0w&s",
                            Name = "Pyrethrin",
                            Quantity = 15f,
                            Status = "Limited Stock",
                            Type = "Chemical",
                            Unit = "liters"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Apply 5g per square meter. Helps prevent fungal diseases.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSly88nvIfyDWzSM0aNglb4NYlimIHfZQ7KDA&s",
                            Name = "Sulfur Dust",
                            Quantity = 50f,
                            Status = "Out of Stock",
                            Type = "Mineral",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Use 2ml per liter of water. Effective against caterpillars and thrips.",
                            Image = "https://image.made-in-china.com/2f0j00rvSoQMsPbDbU/Spinosad-45-Sc-Agriculture-Insecticide-Agro-Chemicals.webp",
                            Name = "Spinosad",
                            Quantity = 10f,
                            Status = "Available",
                            Type = "Biological",
                            Unit = "liters"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dissolve 1g in 1 liter of water. Spray on leaves to prevent blight.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTg9gWe6ZUxCxCQu_p89Run1nw2zS6PyjafCw&s",
                            Name = "Copper Fungicide",
                            Quantity = 25f,
                            Status = "Available",
                            Type = "Mineral",
                            Unit = "kg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("EstimatedProduct")
                        .HasColumnType("real");

                    b.Property<string>("EstimatedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("PlantId");

                    b.HasIndex("YieldId");

                    b.ToTable("Plan", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompleteDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7521),
                            CreatedBy = "Admin",
                            Description = "Kế hoạch trồng cà chua vào mùa đông",
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedProduct = 500f,
                            EstimatedUnit = "kg",
                            ExpertId = 1,
                            IsApproved = true,
                            PlanName = "Trồng cà chua vụ đông",
                            PlantId = 1,
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Complete",
                            YieldId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompleteDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7525),
                            CreatedBy = "Admin",
                            Description = "Kế hoạch trồng dưa lưới trong nhà kính",
                            EndDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedProduct = 300f,
                            EstimatedUnit = "kg",
                            ExpertId = 2,
                            IsApproved = false,
                            PlanName = "Trồng dưa lưới",
                            PlantId = 2,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Complete",
                            YieldId = 2
                        },
                        new
                        {
                            Id = 3,
                            CompleteDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7528),
                            CreatedBy = "Admin",
                            Description = "Kế hoạch trồng bắp cải sạch",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedProduct = 400f,
                            EstimatedUnit = "kg",
                            ExpertId = 3,
                            IsApproved = true,
                            PlanName = "Trồng bắp cải",
                            PlantId = 3,
                            StartDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Complete",
                            YieldId = 3
                        },
                        new
                        {
                            Id = 4,
                            CompleteDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7531),
                            CreatedBy = "Admin",
                            Description = "Kế hoạch trồng rau muống ngắn ngày",
                            EndDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedProduct = 200f,
                            EstimatedUnit = "kg",
                            ExpertId = 1,
                            IsApproved = true,
                            PlanName = "Trồng rau muống",
                            PlantId = 4,
                            StartDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Complete",
                            YieldId = 4
                        },
                        new
                        {
                            Id = 5,
                            CompleteDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7534),
                            CreatedBy = "Admin",
                            Description = "Kế hoạch trồng cà rốt hữu cơ",
                            EndDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedProduct = 350f,
                            EstimatedUnit = "kg",
                            ExpertId = 2,
                            IsApproved = false,
                            PlanName = "Trồng cà rốt",
                            PlantId = 5,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Complete",
                            YieldId = 5
                        },
                        new
                        {
                            Id = 6,
                            CompleteDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7537),
                            CreatedBy = "Admin",
                            Description = "Kế hoạch trồng hành lá sạch",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedProduct = 250f,
                            EstimatedUnit = "kg",
                            ExpertId = 3,
                            IsApproved = true,
                            PlanName = "Trồng hành lá",
                            PlantId = 6,
                            StartDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Complete",
                            YieldId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 5, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7547),
                            CreatedBy = "Admin",
                            Description = "Bản kế hoạch chi tiết trồng củ cải trắng ngắn hạn trong vòng 30 ngày",
                            EndDate = new DateTime(2025, 4, 14, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7540),
                            EstimatedProduct = 500f,
                            EstimatedUnit = "kg",
                            ExpertId = 2,
                            IsApproved = false,
                            PlanName = "Mùa vụ trồng củ cải trắng",
                            PlantId = 10,
                            StartDate = new DateTime(2025, 3, 15, 15, 46, 46, 805, DateTimeKind.Local).AddTicks(7539),
                            Status = "Draft",
                            YieldId = 2
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BasePrice")
                        .HasColumnType("real");

                    b.Property<float>("DeltaOne")
                        .HasColumnType("real");

                    b.Property<float>("DeltaThree")
                        .HasColumnType("real");

                    b.Property<float>("DeltaTwo")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("EstimatedPerOne")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreservationDay")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 15000f,
                            DeltaOne = 1.2f,
                            DeltaThree = 1.1f,
                            DeltaTwo = 0.8f,
                            Description = "Loại rau dễ trồng, phát triển nhanh, giàu dinh dưỡng.",
                            EstimatedPerOne = 1.5f,
                            ImageUrl = "https://thanhnien.mediacdn.vn/Uploaded/camlt/2022_09_08/anh-chup-man-hinh-2022-09-08-luc-155118-6476.png",
                            PlantName = "Rau muống",
                            PreservationDay = 5,
                            Quantity = 100f,
                            Status = "Available",
                            Type = "Rau lá"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 18000f,
                            DeltaOne = 1.3f,
                            DeltaThree = 1f,
                            DeltaTwo = 0.7f,
                            Description = "Loại rau cải phổ biến, dễ trồng, thu hoạch nhanh.",
                            EstimatedPerOne = 1.2f,
                            ImageUrl = "https://fresco.vn/public/upload/product/cai-ngot-thuy-canh-hsxNzHwGZn.jpg",
                            PlantName = "Cải ngọt",
                            PreservationDay = 7,
                            Quantity = 80f,
                            Status = "Available",
                            Type = "Rau lá"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 20000f,
                            DeltaOne = 1.5f,
                            DeltaThree = 1.2f,
                            DeltaTwo = 0.9f,
                            Description = "Rau ăn sống, dễ trồng, nhanh thu hoạch.",
                            EstimatedPerOne = 1.3f,
                            ImageUrl = "https://www.cleanipedia.com/images/5iwkm8ckyw6v/6fcJ3CHTOLA35rCtQEQixF/fb1c276fe0c96d6922838248949b96a4/eGEtbGFjaC5qcGVn/1200w/rau-di%E1%BA%BFp-c%C3%A1-%C4%91%E1%BA%B7t-trong-gi%E1%BB%8F-m%C3%A2y%2C-n%E1%BB%81n-tr%E1%BA%AFng..jpg",
                            PlantName = "Xà lách",
                            PreservationDay = 6,
                            Quantity = 90f,
                            Status = "Available",
                            Type = "Rau lá"
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 25000f,
                            DeltaOne = 1.4f,
                            DeltaThree = 1.3f,
                            DeltaTwo = 0.9f,
                            Description = "Gia vị phổ biến, dễ trồng, thu hoạch nhanh.",
                            EstimatedPerOne = 1f,
                            ImageUrl = "https://www.cleanipedia.com/images/5iwkm8ckyw6v/6fcJ3CHTOLA35rCtQEQixF/fb1c276fe0c96d6922838248949b96a4/eGEtbGFjaC5qcGVn/1200w/rau-di%E1%BA%BFp-c%C3%A1-%C4%91%E1%BA%B7t-trong-gi%E1%BB%8F-m%C3%A2y%2C-n%E1%BB%81n-tr%E1%BA%AFng..jpg",
                            PlantName = "Hành lá",
                            PreservationDay = 10,
                            Quantity = 70f,
                            Status = "Available",
                            Type = "Gia vị"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 16000f,
                            DeltaOne = 1.3f,
                            DeltaThree = 1.1f,
                            DeltaTwo = 0.8f,
                            Description = "Rau leo, phát triển nhanh, thích hợp trồng mùa hè.",
                            EstimatedPerOne = 1.4f,
                            ImageUrl = "https://hatgiongphuongnam.com/asset/upload/image/hat-giong-rau-mong-toi-1.8_.png?v=20190410",
                            PlantName = "Mồng tơi",
                            PreservationDay = 5,
                            Quantity = 85f,
                            Status = "Available",
                            Type = "Rau lá"
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 22000f,
                            DeltaOne = 1.6f,
                            DeltaThree = 1.2f,
                            DeltaTwo = 1f,
                            Description = "Rau giàu dinh dưỡng, tốt cho sức khỏe.",
                            EstimatedPerOne = 1.1f,
                            ImageUrl = "https://product.hstatic.net/200000423303/product/cai-bo-xoi-huu-co_dcef0c0e1fc1491599583cc06a19b830.jpg",
                            PlantName = "Cải bó xôi",
                            PreservationDay = 6,
                            Quantity = 75f,
                            Status = "Available",
                            Type = "Rau lá"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 20000f,
                            DeltaOne = 1.4f,
                            DeltaThree = 1.3f,
                            DeltaTwo = 0.9f,
                            Description = "Loại củ phát triển nhanh, giàu dinh dưỡng.",
                            EstimatedPerOne = 1.5f,
                            ImageUrl = "https://dalafood.vn/wp-content/uploads/2022/06/cu-cai-trang.jpg",
                            PlantName = "Củ cải trắng",
                            PreservationDay = 12,
                            Quantity = 60f,
                            Status = "Available",
                            Type = "Củ"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 19000f,
                            DeltaOne = 1.2f,
                            DeltaThree = 1f,
                            DeltaTwo = 0.8f,
                            Description = "Rau quả dễ trồng, thu hoạch nhanh.",
                            EstimatedPerOne = 1.2f,
                            ImageUrl = "https://bizweb.dktcdn.net/100/390/808/products/dau-bap-huu-co-500x500.jpg?v=1600504946570",
                            PlantName = "Đậu bắp",
                            PreservationDay = 8,
                            Quantity = 65f,
                            Status = "Available",
                            Type = "Quả"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 18000f,
                            DeltaOne = 1.5f,
                            DeltaThree = 1.2f,
                            DeltaTwo = 0.9f,
                            Description = "Rau quả dễ trồng, thu hoạch nhanh, giàu nước.",
                            EstimatedPerOne = 1.3f,
                            ImageUrl = "https://hoayeuthuong.com/hinh-hoa-tuoi/moingay/11896_dua-leo-lon-kg.jpg",
                            PlantName = "Dưa leo",
                            PreservationDay = 7,
                            Quantity = 78f,
                            Status = "Available",
                            Type = "Quả"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 25000f,
                            DeltaOne = 1.6f,
                            DeltaThree = 1.3f,
                            DeltaTwo = 1f,
                            Description = "Loại quả nhiều vitamin, dễ trồng, nhanh thu hoạch.",
                            EstimatedPerOne = 1.4f,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQHrOrbNd1JxfpvcHVUqe5bklaBHYxon-Qew&s",
                            PlantName = "Cà chua",
                            PreservationDay = 10,
                            Quantity = 72f,
                            Status = "Available",
                            Type = "Quả"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PlantYield", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("PlantId", "YieldId");

                    b.HasIndex("YieldId");

                    b.ToTable("PlantYield", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("PlanId");

                    b.ToTable("Problem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Xuất hiện sâu ăn lá trên cây.",
                            FarmerId = 6,
                            PlanId = 1,
                            ProblemName = "Sâu bệnh trên lá",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đất khô, cây có dấu hiệu héo.",
                            FarmerId = 6,
                            PlanId = 2,
                            ProblemName = "Thiếu nước",
                            ResultContent = "Đã tưới nước bổ sung.",
                            Status = "Resolved"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lá vàng, cây chậm phát triển.",
                            FarmerId = 6,
                            PlanId = 3,
                            ProblemName = "Đất kém dinh dưỡng",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Xuất hiện đốm trắng trên lá.",
                            FarmerId = 6,
                            PlanId = 3,
                            ProblemName = "Cây bị nấm",
                            ResultContent = "Đã phun thuốc chống nấm.",
                            Status = "Resolved"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cây phát triển yếu do ánh sáng yếu.",
                            FarmerId = 6,
                            PlanId = 3,
                            ProblemName = "Thiếu ánh sáng",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Phát hiện dấu hiệu sâu đục thân cây.",
                            FarmerId = 6,
                            PlanId = 4,
                            ProblemName = "Sâu đục thân",
                            ResultContent = "Đã xử lý bằng thuốc trừ sâu.",
                            Status = "Resolved"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đất ẩm lâu, có nguy cơ úng rễ.",
                            FarmerId = 6,
                            PlanId = 4,
                            ProblemName = "Mưa quá nhiều",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cây không đủ dinh dưỡng, lá rụng nhiều.",
                            FarmerId = 6,
                            PlanId = 5,
                            ProblemName = "Cây bị héo",
                            ResultContent = "Đã bổ sung phân bón.",
                            Status = "Resolved"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bọ trĩ gây hại trên lá non.",
                            FarmerId = 6,
                            PlanId = 6,
                            ProblemName = "Bọ trĩ tấn công",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nắng nóng kéo dài gây stress cho cây.",
                            FarmerId = 6,
                            PlanId = 6,
                            ProblemName = "Nhiệt độ quá cao",
                            ResultContent = "Đã che bóng giảm nhiệt độ.",
                            Status = "Resolved"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.ProblemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemImage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProblemId = 1,
                            Url = "https://vnmedia.vn/file/8a10a0d36ccebc89016ce0c6fa3e1b83/8a10a0d3761897b0017665518e9b6a91/072022/2.sau_to.sau_bap_cai_20220714112122.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            ProblemId = 1,
                            Url = "https://lh6.googleusercontent.com/proxy/izOE5Anqbg4twC9njJa03WFsLuRu1J46zvsAGTocWFn5jcMDko9HXi_8TujVy5rDMKXI2NSfy4cot2z3H4-9PBwzBA"
                        },
                        new
                        {
                            Id = 3,
                            ProblemId = 2,
                            Url = "https://dongthanhcong.vn/wp-content/uploads/2024/07/dau-hieu-cua-cay-bi-thieu-nuoc-1200x720.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ProblemId = 2,
                            Url = "https://thmh.vn/wp-content/uploads/2024/10/cay-bi-heo.png"
                        },
                        new
                        {
                            Id = 5,
                            ProblemId = 3,
                            Url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJnmU_pF5Xx89ht6XZItdpbtLKm6Xk_e_xaw&s"
                        },
                        new
                        {
                            Id = 6,
                            ProblemId = 3,
                            Url = "https://biovina.com.vn/wp-content/uploads/2016/05/thieudinhduong.jpg"
                        },
                        new
                        {
                            Id = 7,
                            ProblemId = 4,
                            Url = "https://bachnong.vn/upload/tin-tuc/phong-tri-benh-cay-trong/benh-nam-o-cay-trong_1.jpg"
                        },
                        new
                        {
                            Id = 8,
                            ProblemId = 4,
                            Url = "https://nhaluoiviet.vn/images/tin-tuc/trong-rau/cac-loai-nam-thuong-gap-o-cay-trong.jpg"
                        },
                        new
                        {
                            Id = 9,
                            ProblemId = 5,
                            Url = "https://camnangnhanong.wordpress.com/wp-content/uploads/2023/11/image-1.png?w=1024"
                        },
                        new
                        {
                            Id = 10,
                            ProblemId = 5,
                            Url = "https://bizweb.dktcdn.net/100/521/346/files/cay-thieu-anh-sang-co-bieu-hien-gi.jpg?v=1735714018430"
                        },
                        new
                        {
                            Id = 11,
                            ProblemId = 6,
                            Url = "https://bvtvthienbinh.com/files/upload/TIN-TUC/can-canh-sau-duc-than.jpg"
                        },
                        new
                        {
                            Id = 12,
                            ProblemId = 6,
                            Url = "https://kimnonggoldstar.vn/wp-content/uploads/2022/12/sau-duc-than-hai-sau-rieng-kimnonggoldstar-vn-1.jpg"
                        },
                        new
                        {
                            Id = 13,
                            ProblemId = 7,
                            Url = "https://file1.dangcongsan.vn/data/0/images/2022/09/16/vanphong/imager-8-64713-700.jpg"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Retailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Retailer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 12,
                            Address = "123 Đường Lê Lợi, Quận 1, TP.HCM",
                            Avatar = "https://nationaltoday.com/wp-content/uploads/2022/05/91-Retailer.jpg",
                            DOB = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 106.7009f,
                            Longitude = 10.7769f,
                            Phone = "0901234567"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 13,
                            Address = "456 Đường Nguyễn Huệ, Quận 1, TP.HCM",
                            Avatar = "https://thumbs.dreamstime.com/b/hardware-store-worker-smiling-african-standing-fasteners-aisle-41251157.jpg",
                            DOB = new DateTime(1990, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 106.6822f,
                            Longitude = 10.7627f,
                            Phone = "0912345678"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 14,
                            Address = "789 Đường Phạm Văn Đồng, Quận Thủ Đức, TP.HCM",
                            Avatar = "https://www.kofastudy.com/kike_content/uploads/2021/01/e-Commerce-Today.jpg",
                            DOB = new DateTime(1995, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 106.6297f,
                            Longitude = 10.8231f,
                            Phone = "0923456789"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Yield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<string>("AreaUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Yield", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 500f,
                            AreaUnit = "m2",
                            Description = "Đất hữu cơ màu mỡ",
                            Status = "Available",
                            Type = "Đất hữu cơ",
                            YieldName = "Trang trại A"
                        },
                        new
                        {
                            Id = 2,
                            Area = 300f,
                            AreaUnit = "m2",
                            Description = "Đất chua cần cải tạo",
                            Status = "Maintenance",
                            Type = "Đất chua",
                            YieldName = "Nông trại B"
                        },
                        new
                        {
                            Id = 3,
                            Area = 800f,
                            AreaUnit = "m2",
                            Description = "Đất phèn nhẹ, thích hợp trồng lúa",
                            Status = "Available",
                            Type = "Đất phèn",
                            YieldName = "Ruộng C"
                        },
                        new
                        {
                            Id = 4,
                            Area = 450f,
                            AreaUnit = "m2",
                            Description = "Đất đen màu mỡ",
                            Status = "Available",
                            Type = "Đất đen",
                            YieldName = "Nông trại D"
                        },
                        new
                        {
                            Id = 5,
                            Area = 600f,
                            AreaUnit = "m2",
                            Description = "Đất xám, thoát nước tốt",
                            Status = "Available",
                            Type = "Đất xám",
                            YieldName = "Trang trại E"
                        },
                        new
                        {
                            Id = 6,
                            Area = 350f,
                            AreaUnit = "m2",
                            Description = "Đất cát pha, cần giữ ẩm tốt",
                            Status = "In-Use",
                            Type = "Đất cát",
                            YieldName = "Khu vực F"
                        },
                        new
                        {
                            Id = 7,
                            Area = 400f,
                            AreaUnit = "m2",
                            Description = "Đất đỏ bazan giàu dinh dưỡng",
                            Status = "Available",
                            Type = "Đất đỏ",
                            YieldName = "Vườn G"
                        });
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringFertilizer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", "Fertilizer")
                        .WithMany("CaringFertilizers")
                        .HasForeignKey("FertilizerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringFertilizers")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Fertilizer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringImages")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringItem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Item", "Item")
                        .WithMany("CaringItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringItems")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringPesticide", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", "Pesticide")
                        .WithMany("CaringPesticides")
                        .HasForeignKey("PesticideId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringPesticides")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("CaringTasks")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Problem", "Problem")
                        .WithMany("CaringTasks")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Plan");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.DataEnvironment", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany("DataEnvironments")
                        .HasForeignKey("YieldId")
                        .IsRequired();

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Device", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany("Devices")
                        .HasForeignKey("YieldId");

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Expert", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Experts")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Farmer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Farmers")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerCaringTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("FarmerCaringTasks")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("FarmerCaringTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerHarvestingTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("FarmerHarvestingTasks")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", "HarvestingTask")
                        .WithMany("FarmerHarvestingTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("HarvestingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerPackagingTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("FarmerPackagingTasks")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", "PackagingTask")
                        .WithMany("FarmerPackagingTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("PackagingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerPermission", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("FarmerPermissions")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("FarmerPermissions")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", "HarvestingTask")
                        .WithMany("HarvestingImages")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("HarvestingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingItem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Item", "Item")
                        .WithMany("HarvestingItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", "HarvestingTask")
                        .WithMany("HarvestingItems")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("HarvestingTask");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("HarvestingTasks")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Inspector", "Inspector")
                        .WithMany("InspectingForms")
                        .HasForeignKey("InspectorId");

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("InspectingForms")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Inspector");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.InspectingResult", "InspectingResult")
                        .WithMany("InspectingImages")
                        .HasForeignKey("ResultId")
                        .IsRequired();

                    b.Navigation("InspectingResult");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingResult", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", "InspectingForm")
                        .WithMany("InspectingResults")
                        .HasForeignKey("FormId")
                        .IsRequired();

                    b.Navigation("InspectingForm");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Inspector", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Inspectors")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationExpert", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Expert", "Expert")
                        .WithMany("NotificationExperts")
                        .HasForeignKey("ExpertId")
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationFarmer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("NotificationFarmers")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.NotificationRetailer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Retailer", "Retailer")
                        .WithMany("NotificationRetailers")
                        .HasForeignKey("RetailerId")
                        .IsRequired();

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Order", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.PackagingType", "PackagingType")
                        .WithMany("Orders")
                        .HasForeignKey("PackagingTypeId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("Orders")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Retailer", "Retailer")
                        .WithMany("Orders")
                        .HasForeignKey("RetailerId")
                        .IsRequired();

                    b.Navigation("PackagingType");

                    b.Navigation("Plan");

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", "PackagingTask")
                        .WithMany("PackagingImages")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("PackagingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingItem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Item", "Item")
                        .WithMany("PackagingItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", "PackagingTask")
                        .WithMany("PackagingItems")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PackagingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingProduct", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", "HarvestingTask")
                        .WithMany("PackagingProducts")
                        .HasForeignKey("HarvestingTaskId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Order", "Order")
                        .WithMany("PackagingProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", "PackagingTask")
                        .WithMany("PackagingProducts")
                        .HasForeignKey("PackagingTaskId")
                        .IsRequired();

                    b.Navigation("HarvestingTask");

                    b.Navigation("Order");

                    b.Navigation("PackagingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.PackagingType", "PackagingType")
                        .WithMany("PackagingTasks")
                        .HasForeignKey("PackagingTypeId");

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("PackagingTasks")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("PackagingType");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plan", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Expert", "Expert")
                        .WithMany("Plans")
                        .HasForeignKey("ExpertId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plant", "Plant")
                        .WithMany("Plans")
                        .HasForeignKey("PlantId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany("Plans")
                        .HasForeignKey("YieldId");

                    b.Navigation("Expert");

                    b.Navigation("Plant");

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PlantYield", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plant", "Plant")
                        .WithMany("PlantYields")
                        .HasForeignKey("PlantId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany("PlantYields")
                        .HasForeignKey("YieldId")
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Problem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("Problems")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("Problems")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.ProblemImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Problem", "Problem")
                        .WithMany("ProblemImages")
                        .HasForeignKey("ProblemId")
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Retailer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Retailers")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Transaction", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Account", b =>
                {
                    b.Navigation("Experts");

                    b.Navigation("Farmers");

                    b.Navigation("Inspectors");

                    b.Navigation("Retailers");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", b =>
                {
                    b.Navigation("CaringFertilizers");

                    b.Navigation("CaringImages");

                    b.Navigation("CaringItems");

                    b.Navigation("CaringPesticides");

                    b.Navigation("FarmerCaringTasks");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Expert", b =>
                {
                    b.Navigation("NotificationExperts");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Farmer", b =>
                {
                    b.Navigation("FarmerCaringTasks");

                    b.Navigation("FarmerHarvestingTasks");

                    b.Navigation("FarmerPackagingTasks");

                    b.Navigation("FarmerPermissions");

                    b.Navigation("NotificationFarmers");

                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", b =>
                {
                    b.Navigation("CaringFertilizers");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", b =>
                {
                    b.Navigation("FarmerHarvestingTasks");

                    b.Navigation("HarvestingImages");

                    b.Navigation("HarvestingItems");

                    b.Navigation("PackagingProducts");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", b =>
                {
                    b.Navigation("InspectingResults");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingResult", b =>
                {
                    b.Navigation("InspectingImages");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Inspector", b =>
                {
                    b.Navigation("InspectingForms");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Item", b =>
                {
                    b.Navigation("CaringItems");

                    b.Navigation("HarvestingItems");

                    b.Navigation("PackagingItems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Order", b =>
                {
                    b.Navigation("PackagingProducts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingTask", b =>
                {
                    b.Navigation("FarmerPackagingTasks");

                    b.Navigation("PackagingImages");

                    b.Navigation("PackagingItems");

                    b.Navigation("PackagingProducts");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PackagingType", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PackagingTasks");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", b =>
                {
                    b.Navigation("CaringPesticides");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plan", b =>
                {
                    b.Navigation("CaringTasks");

                    b.Navigation("FarmerPermissions");

                    b.Navigation("HarvestingTasks");

                    b.Navigation("InspectingForms");

                    b.Navigation("Orders");

                    b.Navigation("PackagingTasks");

                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plant", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("PlantYields");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Problem", b =>
                {
                    b.Navigation("CaringTasks");

                    b.Navigation("ProblemImages");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Retailer", b =>
                {
                    b.Navigation("NotificationRetailers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Yield", b =>
                {
                    b.Navigation("DataEnvironments");

                    b.Navigation("Devices");

                    b.Navigation("Plans");

                    b.Navigation("PlantYields");
                });
#pragma warning restore 612, 618
        }
    }
}
