// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spring25.BlCapstone.BE.Repositories;

#nullable disable

namespace Spring25.BlCapstone.BE.Repositories.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringFertilizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FertilizerId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringFertilizer", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringImage", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringItem", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringPesticide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PesticideId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PesticideId");

                    b.HasIndex("TaskId");

                    b.ToTable("CaringPesticide", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("YieldId");

                    b.ToTable("CaringTask", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YieldId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Expert", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Farmer", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerPermission", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("PlanId", "FarmerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerPermission", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AvailableQuantity")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalQuantity")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fertilizer", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FertilizerRange", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("FertilizerId")
                        .HasColumnType("int");

                    b.Property<float>("Maximum")
                        .HasColumnType("real");

                    b.Property<float>("Minimum")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId", "FertilizerId");

                    b.HasIndex("FertilizerId");

                    b.ToTable("FertilizerRange", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("HarvestingImage", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaskId");

                    b.ToTable("HarvestingItem", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("HarvestedQuantity")
                        .HasColumnType("real");

                    b.Property<string>("HarvestedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("PlanId");

                    b.ToTable("HarvestingTask", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BrixPoint")
                        .HasColumnType("real");

                    b.Property<bool>("CanHarvest")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<int>("InspectingQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("InspectorId")
                        .HasColumnType("int");

                    b.Property<float?>("IssuePercent")
                        .HasColumnType("real");

                    b.Property<float>("Moisture")
                        .HasColumnType("real");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShellColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("TestGTKitColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PlanId");

                    b.ToTable("InspectingForm", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("InspectingImage", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaskId");

                    b.ToTable("InspectingItem", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Inspector", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IssueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("Issue", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("RetailerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RetailerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.OrderPlan", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPlan", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.OrderPlant", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPlant", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AvailableQuantity")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalQuantity")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pesticide", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PesticideRange", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("PesticideId")
                        .HasColumnType("int");

                    b.Property<float>("Maximum")
                        .HasColumnType("real");

                    b.Property<float>("Minimum")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId", "PesticideId");

                    b.HasIndex("PesticideId");

                    b.ToTable("PesticideRange", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailablePackagingQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("EstimatedProduct")
                        .HasColumnType("real");

                    b.Property<string>("EstimatedUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("PlantId");

                    b.HasIndex("YieldId");

                    b.ToTable("Plan", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FertilizerUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GTTestKitColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("MaxBrixPoint")
                        .HasColumnType("float");

                    b.Property<double>("MaxFertilizer")
                        .HasColumnType("float");

                    b.Property<double>("MaxHumid")
                        .HasColumnType("float");

                    b.Property<double>("MaxMoisture")
                        .HasColumnType("float");

                    b.Property<double>("MaxPesticide")
                        .HasColumnType("float");

                    b.Property<double>("MaxTemp")
                        .HasColumnType("float");

                    b.Property<double>("MinBrixPoint")
                        .HasColumnType("float");

                    b.Property<double>("MinFertilizer")
                        .HasColumnType("float");

                    b.Property<double>("MinHumid")
                        .HasColumnType("float");

                    b.Property<double>("MinMoisture")
                        .HasColumnType("float");

                    b.Property<double>("MinPesticide")
                        .HasColumnType("float");

                    b.Property<double>("MinTemp")
                        .HasColumnType("float");

                    b.Property<string>("PesticideUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Problem", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.ProblemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemImage", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Retailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("LongxLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Retailer", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.SampleSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("SampleSolution", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Yield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("AreaUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Yield", (string)null);
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringFertilizer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", "Fertilizer")
                        .WithMany("CaringFertilizers")
                        .HasForeignKey("FertilizerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringFertilizers")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Fertilizer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringImages")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringItem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Item", "Item")
                        .WithMany("CaringItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringItems")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringPesticide", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", "Pesticide")
                        .WithMany("CaringPesticides")
                        .HasForeignKey("PesticideId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", "CaringTask")
                        .WithMany("CaringPesticides")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("CaringTask");

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("CaringTasks")
                        .HasForeignKey("FarmerId");

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("CaringTasks")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Problem", "Problem")
                        .WithMany("CaringTasks")
                        .HasForeignKey("ProblemId");

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany()
                        .HasForeignKey("YieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Plan");

                    b.Navigation("Problem");

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Device", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany("Devices")
                        .HasForeignKey("YieldId");

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Expert", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Experts")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Farmer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Farmers")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FarmerPermission", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("FarmerPermissions")
                        .HasForeignKey("FarmerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("FarmerPermissions")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.FertilizerRange", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", "Fertilizer")
                        .WithMany("FertilizerRanges")
                        .HasForeignKey("FertilizerId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plant", "Plant")
                        .WithMany("FertilizerRanges")
                        .HasForeignKey("PlantId")
                        .IsRequired();

                    b.Navigation("Fertilizer");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", "HarvestingTask")
                        .WithMany("HarvestingImages")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("HarvestingTask");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingItem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Item", "Item")
                        .WithMany("HarvestingItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", "HarvestingTask")
                        .WithMany("HarvestingItems")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("HarvestingTask");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Farmer", "Farmer")
                        .WithMany("HarvestingTasks")
                        .HasForeignKey("FarmerId");

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("HarvestingTasks")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Inspector", "Inspector")
                        .WithMany("InspectingForms")
                        .HasForeignKey("InspectorId");

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("InspectingForms")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Inspector");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", "InspectingForm")
                        .WithMany("InspectingImages")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("InspectingForm");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingItem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Item", "Item")
                        .WithMany("InspectingItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", "InspectingForm")
                        .WithMany("InspectingItems")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("InspectingForm");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Inspector", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Inspectors")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Issue", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Problem", "Problem")
                        .WithMany("Issues")
                        .HasForeignKey("ProblemId")
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Order", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Retailer", "Retailer")
                        .WithMany("Orders")
                        .HasForeignKey("RetailerId")
                        .IsRequired();

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.OrderPlan", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Order", "Order")
                        .WithMany("OrderPlans")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("OrderPlans")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.OrderPlant", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Order", "Order")
                        .WithMany("OrderPlants")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plant", "Plant")
                        .WithMany("OrderPlants")
                        .HasForeignKey("PlantId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.PesticideRange", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", "Pesticide")
                        .WithMany("PesticideRanges")
                        .HasForeignKey("PesticideId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plant", "Plant")
                        .WithMany("PesticideRanges")
                        .HasForeignKey("PlantId")
                        .IsRequired();

                    b.Navigation("Pesticide");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plan", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Expert", "Expert")
                        .WithMany("Plans")
                        .HasForeignKey("ExpertId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plant", "Plant")
                        .WithMany("Plans")
                        .HasForeignKey("PlantId")
                        .IsRequired();

                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Yield", "Yield")
                        .WithMany("Plans")
                        .HasForeignKey("YieldId")
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Plant");

                    b.Navigation("Yield");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Problem", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Plan", "Plan")
                        .WithMany("Problems")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.ProblemImage", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Problem", "Problem")
                        .WithMany("ProblemImages")
                        .HasForeignKey("ProblemId")
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Retailer", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Account", "Account")
                        .WithMany("Retailers")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.SampleSolution", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Issue", "Issue")
                        .WithMany("SampleSolutions")
                        .HasForeignKey("IssueId")
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Transaction", b =>
                {
                    b.HasOne("Spring25.BlCapstone.BE.Repositories.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Account", b =>
                {
                    b.Navigation("Experts");

                    b.Navigation("Farmers");

                    b.Navigation("Inspectors");

                    b.Navigation("Retailers");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.CaringTask", b =>
                {
                    b.Navigation("CaringFertilizers");

                    b.Navigation("CaringImages");

                    b.Navigation("CaringItems");

                    b.Navigation("CaringPesticides");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Expert", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Farmer", b =>
                {
                    b.Navigation("CaringTasks");

                    b.Navigation("FarmerPermissions");

                    b.Navigation("HarvestingTasks");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Fertilizer", b =>
                {
                    b.Navigation("CaringFertilizers");

                    b.Navigation("FertilizerRanges");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.HarvestingTask", b =>
                {
                    b.Navigation("HarvestingImages");

                    b.Navigation("HarvestingItems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.InspectingForm", b =>
                {
                    b.Navigation("InspectingImages");

                    b.Navigation("InspectingItems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Inspector", b =>
                {
                    b.Navigation("InspectingForms");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Issue", b =>
                {
                    b.Navigation("SampleSolutions");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Item", b =>
                {
                    b.Navigation("CaringItems");

                    b.Navigation("HarvestingItems");

                    b.Navigation("InspectingItems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Order", b =>
                {
                    b.Navigation("OrderPlans");

                    b.Navigation("OrderPlants");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Pesticide", b =>
                {
                    b.Navigation("CaringPesticides");

                    b.Navigation("PesticideRanges");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plan", b =>
                {
                    b.Navigation("CaringTasks");

                    b.Navigation("FarmerPermissions");

                    b.Navigation("HarvestingTasks");

                    b.Navigation("InspectingForms");

                    b.Navigation("OrderPlans");

                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Plant", b =>
                {
                    b.Navigation("FertilizerRanges");

                    b.Navigation("OrderPlants");

                    b.Navigation("PesticideRanges");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Problem", b =>
                {
                    b.Navigation("CaringTasks");

                    b.Navigation("Issues");

                    b.Navigation("ProblemImages");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Retailer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Spring25.BlCapstone.BE.Repositories.Models.Yield", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
